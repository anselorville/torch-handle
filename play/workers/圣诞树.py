# # 圣诞树
# 圣诞节快到了，有⼀棵挂满彩灯的⼆叉树，需要你来按照图纸装饰。彩灯有5种颜⾊变化，分别⽤1-5表示。1表示 红⾊， 2表示⻩⾊， 3表示蓝⾊， 4表示紫⾊， 5 表示绿⾊。每个节点都⼀个颜⾊控制器，每按⼀下都会产⽣⼀
# 个控制信号。控制信号将从当前节点出发向下传递，将当前节点的彩灯以及以当前节点为根节点的⼦树上的所有节点，切换到下⼀个颜⾊（ 红 -> ⻩-> 蓝 -> 紫 -> 绿 -> 红 ...） 循环切换。
# 给定⼆叉树的初始状态 initial 和 ⽬标状态 target,两者都以**层序遍历**产出的⼀维数组表示。数组元素对应对应位置节点的颜⾊，0表示该节点没有彩灯。
# 请给出从initial状态切换⾄target状态需要的最少控制器点击次数。
# **注意：**
# 1. 控制器按⼀下所产⽣的控制信号，不只影响当前节点，也会影响以当前节点为根节点的⼦树上所有节点切换到下⼀个颜⾊（最终不⼀定是同⼀个颜⾊）。
# 2. 特别地，假设⼦树上的某个节点X上没有彩灯，则祖先节点处发出的控制信号将不会继续传递给X的后代节点。
# **输⼊描述**
# - 第⼀⾏输⼊为⼀个整数n, 代表inital 和 target 数组的⼤⼩。
# - 第⼆⾏输⼊为n个整数，代表inital数组。
# - 第三⾏输⼊为n个整数，代表target数组。
# **其他：**
# - 如果 initial[i] == 0, 则 target[i] 也⼀定为0。
# - 1 <=initial.length <= 106
# **输出描述**
# ⼀个整数，表示最少点击次数

